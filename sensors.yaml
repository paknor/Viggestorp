- platform: rflink

- platform: moon

- platform: season

- platform: snmp
  scan_interval : 30
  host: 192.168.0.115
  name: CPU-temperature
  unit_of_measurement: '°C'
  community: monitor
  baseoid: 1.3.6.1.4.1.6574.1.2.0

- platform: snmp
  scan_interval : 30
  host: 192.168.0.115
  name: HD1-temperature
  unit_of_measurement: '°C'
  community: monitor
  baseoid: 1.3.6.1.4.1.6574.2.1.1.6.0

- platform: snmp
  scan_interval : 30
  host: 192.168.0.115
  name: HD2-temperature
  unit_of_measurement: '°C'
  community: monitor
  baseoid: 1.3.6.1.4.1.6574.2.1.1.6.1

- platform: snmp
  scan_interval : 30
  host: 192.168.0.115
  name: HDunit
  unit_of_measurement: 'B'
  community: monitor
  baseoid: 1.3.6.1.2.1.25.2.3.1.4.42

- platform: snmp
  scan_interval : 30
  host: 192.168.0.115
  name: HDtotal
  unit_of_measurement: 'B'
  community: monitor
  baseoid: 1.3.6.1.2.1.25.2.3.1.5.42

- platform: snmp
  scan_interval : 30
  host: 192.168.0.115
  name: HDused
  unit_of_measurement: 'B'
  community: monitor
  baseoid: 1.3.6.1.2.1.25.2.3.1.6.42

- platform: template
  sensors:
    space_left:
      value_template: '{{ ((states("sensor.hdtotal")|int|abs - states("sensor.hdused")|int|abs) * states("sensor.hdunit")|int|abs / 1024 /1024 / 1024) | round(1)}}'
      friendly_name: 'Utrymme kvar NAS'
      unit_of_measurement: 'Gb'

- platform: template 
  sensors:
    coffee_brewing:
      value_template: "{{ states.sensor.fibaro_system_fgwpef_wall_plug_gen5_power.state | float > 1000.0 }}" 
      friendly_name: "Brygger kaffe"

- platform: template
  sensors:
    is_dark:
      value_template: "{{ states.sensor.ljus01.state | int < 10 }}"
      friendly_name: 'Det är mörkt'

- platform: yr
  monitored_conditions:
    - temperature
    - symbol
    - precipitation
    - windSpeed
    - pressure
    - windDirection
    - humidity
    - fog
    - cloudiness
    - lowClouds
    - mediumClouds
    - highClouds
    - dewpointTemperature

- platform: command_line
  name: CPU-temperatur Pi
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  unit_of_measurement: "°C"
  value_template: '{{ value | multiply(0.001) | round(1) }}'

- platform: command_line
  name: Database
  command: "stat --printf='%s' /home/homeassistant/.homeassistant/home-assistant_v2.db"
  scan_interval: 60
  unit_of_measurement: "Mb"
  value_template: >-
    {% set bytes = value | int %}
    {% set Mbytes = (bytes / 1024 / 1024) | int %}
    {{ Mbytes }}

- platform: command_line
  name: "HASS uptime"
  command: echo "$(($(date +%s) - $(date --date="`systemctl show home-assistant.service -p ActiveEnterTimestamp | awk -F'=' '{print $2}'`" "+%s")))"
  scan_interval: 60
  value_template: >-
    {% set uptime = value | int %}
    {% set seconds = uptime % 60 %}
    {% set minutes = ((uptime % 3600) / 60) | int %}
    {% set hours = ((uptime % 86400) / 3600) | int %}
    {% set days = (uptime / 86400) | int %}

    {%- if days > 0 -%}
      {%- if days == 1 -%}
        1 day
      {%- else -%}
        {{ days }} days
      {%- endif -%}
    {%- endif -%}
    {%- if hours > 0 -%}
      {%- if days > 0 -%}
        {{ ', ' }}
      {%- endif -%}
      {%- if hours == 1 -%}
        1 hour
      {%- else -%}
        {{ hours }} hours
      {%- endif -%}
    {%- endif -%}
    {%- if minutes > 0 -%}
      {%- if days > 0 or hours > 0 -%}
        {{ ', ' }}
      {%- endif -%}
      {%- if minutes == 1 -%}
        1 minute
      {%- else -%}
        {{ minutes }} minutes
      {%- endif -%}
    {%- endif -%}
    {%- if seconds > 0 -%}
      {%- if days > 0 or hours > 0 or minutes > 0 -%}
        {{ ', ' }}
      {%- endif -%}
      {%- if seconds == 1 -%}
        1 second
      {%- else -%}
        {{ seconds }} seconds
      {%- endif -%}
    {%- endif -%}

- platform: synologydsm
  host: 192.168.0.115
  username: !secret synology_user
  password: !secret synology_pass
  monitored_conditions:
    - cpu_total_load
    - memory_real_usage
    - network_up
    - network_down
    - volume_size_total
    - volume_size_used
    - volume_percentage_used

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: memory_use_percent
    - type: memory_free
    - type: processor_use
    - type: load_1m
    - type: load_5m
    - type: load_15m
    - type: since_last_boot


################## Taklampa sovrum
- platform: template
  sensors:
    bedroom_time:
      friendly_name: 'Klockslag'
      value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.bedroom_hour") | int, states("input_number.bedroom_minutes") | int) }}'
    bedroom_transition:
      friendly_name: 'Transition'
      value_template: '{{ states.input_number.bedroom_transition.state | int  }} minuter'

################## Kaffebryggare
- platform: template
  sensors:
    coffee_time:
      friendly_name: 'Klockslag'
      value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.coffee_hour") | int, states("input_number.coffee_minutes") | int) }}'

################## Multisensor SN1
- platform: mqtt
  state_topic: "bruh/sensornode1"
  name: "Ljus01"
  unit_of_measurement: '%'
  value_template: '{{ value_json.ldr }}'

#- platform: mqtt  
#  state_topic: "bruh/sensornode1"  
#  name: "SN1 Temperature"  
#  unit_of_measurement: "°C"  
#  value_template: '{{ value_json.temperature | round(1) }}'  

#- platform: mqtt
#  state_topic: "bruh/sensornode1"
#  name: "SN1 Humidity"
#  unit_of_measurement: "%"
#  value_template: '{{ value_json.humidity | round(1) }}'

#- platform: mqtt
#  state_topic: "bruh/sensornode1"  
#  name: "SN1 PIR"
#  value_template: '{{ value_json.motion }}'

################## ESP_Easy1
- platform: mqtt
  state_topic: "ESP_Easy1/PIR/motion"
  name: "SN2 PIR"

- platform: mqtt
  state_topic: "ESP_Easy1/DHT22/Temperature"
  name: "Temperatur källare"
  unit_of_measurement: "°C"
  value_template: '{{ value | round(1) }}'

- platform: mqtt
  state_topic: "ESP_Easy1/DHT22/Humidity"
  name: "Luftfuktighet källare"
  unit_of_measurement: "rh"
  value_template: '{{ value | round(1) }}'

- platform: mqtt
  state_topic: "zanzito/ke/battery_level"
  name: "Note 8 Batteri"
  unit_of_measurement: "%"

################## ESP_Easy_Hall
- platform: mqtt
  state_topic: "ESP_Easy_Hall/PIR/motion"
  name: "PIR hall"

- platform: mqtt
  state_topic: "ESP_Easy_Hall/sensor/light"
  name: "Ljus hall"
  unit_of_measurement: "%"

################## Kalender
- platform: template
  sensors:
    ke_start_time:
      value_template: '{{ states.calendar.kurteinarssongmailcom.attributes.start_time }}'
      friendly_name: 'Start'
    ke_end_time:
      value_template: '{{ states.calendar.kurteinarssongmailcom.attributes.end_time }}'
      friendly_name: 'Slut'
    ke_message:
      value_template: '{{ states.calendar.kurteinarssongmailcom.attributes.message }}'
      friendly_name: 'Meddelande'
    ke_description:
      value_template: '{{ states.calendar.kurteinarssongmailcom.attributes.description }}'
      friendly_name: 'Beskrivning'
    ke_location:
      value_template: '{{ states.calendar.kurteinarssongmailcom.attributes.location }}'
      friendly_name: 'Plats'

################## Sun
- platform: template
  sensors:
    winlights:
      friendly_name: 'Tänder fönsterlampor'
      value_template: '{{ (as_timestamp(states.sun.sun.attributes.next_setting) - 2100) | timestamp_custom("%H:%M:%S") }}'
    sun_set:
      friendly_name: 'Solen går ner'
      value_template: '{{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%H:%M:%S") }}'
    sun_set_time_left:
      friendly_name: 'Tid innan solen går ner'
      value_template: '{{ (as_timestamp(states.sun.sun.attributes.next_setting) - as_timestamp(now()) - 3600) | timestamp_custom("%H:%M:%S") }}'
    winlights_time_left:
      friendly_name: 'Tid innan fönsterlampor tänds'
      value_template: '{{ (as_timestamp(states.sun.sun.attributes.next_setting) - as_timestamp(now()) - 2100 - 3600) | timestamp_custom("%H:%M:%S") }}'
    time_now:
      friendly_name: 'Klockslag'
      value_template: '{{ as_timestamp(now()) | timestamp_custom("%H:%M") }}'
    elevation:
      friendly_name: 'Solhöjd'
      value_template: '{{ states.sun.sun.attributes.elevation }}'
      unit_of_measurement: "°"

################## LED-strip
- platform: template
  sensors:
    slider_rgb_led_strip:
      friendly_name: 'RGB LED-strip'
      value_template: >- 
        {% set r = states.input_number.led_strip_r.state | int %}
        {% set g = states.input_number.led_strip_g.state | int %}
        {% set b = states.input_number.led_strip_b.state | int %}
        ({{ r | int }}, {{ g | int }}, {{ b | int }})
    rgb_led_strip_pv:
      friendly_name: 'RGB'
      value_template: '{{ states.light.led_strip.attributes.rgb_color }}'

################## SMHI
# http://opendata.smhi.se/apidocs/metfcst/parameters.html
- platform: mqtt
  state_topic: "smhi/msl"
  name: "SMHI Air pressure"
  unit_of_measurement: "hPa"

- platform: mqtt
  state_topic: "smhi/t"
  name: "SMHI Air temperature"
  unit_of_measurement: "°C"

- platform: mqtt
  state_topic: "smhi/vis"
  name: "SMHI Horisontal visibility"
  unit_of_measurement: "km"

- platform: mqtt
  state_topic: "smhi/wd"
  name: "SMHI Wind direction"
  unit_of_measurement: "°"

- platform: mqtt
  state_topic: "smhi/ws"
  name: "SMHI Wind speed"
  unit_of_measurement: "m/s"
  
- platform: mqtt
  state_topic: "smhi/r"
  name: "SMHI Relative humidity"
  unit_of_measurement: "%"

- platform: mqtt
  state_topic: "smhi/tstm"
  name: "SMHI Thunder propability"
  unit_of_measurement: "%"

- platform: mqtt
  state_topic: "smhi/tcc_mean"
  name: "SMHI Mean value of total cloud cover"
  unit_of_measurement: "octas"

- platform: mqtt
  state_topic: "smhi/lcc_mean"
  name: "SMHI Mean value of low level cloud cover"
  unit_of_measurement: "octas"

- platform: mqtt
  state_topic: "smhi/mcc_mean"
  name: "SMHI Mean value of medium level cloud cover"
  unit_of_measurement: "octas"

- platform: mqtt
  state_topic: "smhi/hcc_mean"
  name: "SMHI Mean value of high level cloud cover"
  unit_of_measurement: "octas"

- platform: mqtt
  state_topic: "smhi/gust"
  name: "SMHI Vind gust speed"
  unit_of_measurement: "m/s"

- platform: mqtt
  state_topic: "smhi/pmin"
  name: "SMHI Minimum precipitation intensity"
  unit_of_measurement: "mm/h"

- platform: mqtt
  state_topic: "smhi/pmax"
  name: "SMHI Maximum precipitation intensity"
  unit_of_measurement: "mm/h"

- platform: mqtt
  state_topic: "smhi/spp"
  name: "SMHI Percent of precipitation in frozen form"
  unit_of_measurement: "%"

- platform: mqtt
  state_topic: "smhi/pcat"
  name: "SMHI Precipitation category"
  unit_of_measurement: "category"

- platform: mqtt
  state_topic: "smhi/pmean"
  name: "SMHI Mean precipitation intensity"
  unit_of_measurement: "mm/h"

- platform: mqtt
  state_topic: "smhi/pmedian"
  name: "SMHI Median precipitation intensity"
  unit_of_measurement: "mm/h"

- platform: mqtt
  state_topic: "smhi/Wsymb2"
  name: "SMHI Weather symbol"
  unit_of_measurement: "code"

- platform: template
  sensors:
    smhi_weathertype:
      friendly_name: "SMHI Weathertype"
      value_template: >-
        {% if states.sensor.smhi_weather_symbol.state | int == 1 %} Clear sky
        {% elif states.sensor.smhi_weather_symbol.state | int == 2 %} Nearly clear sky
        {% elif states.sensor.smhi_weather_symbol.state | int == 3 %} Variable cloudiness
        {% elif states.sensor.smhi_weather_symbol.state | int == 4 %} Halfclear sky
        {% elif states.sensor.smhi_weather_symbol.state | int == 5 %} Cloudy sky
        {% elif states.sensor.smhi_weather_symbol.state | int == 6 %} Overcast
        {% elif states.sensor.smhi_weather_symbol.state | int == 7 %} Fog
        {% elif states.sensor.smhi_weather_symbol.state | int == 8 %} Light rain showers
        {% elif states.sensor.smhi_weather_symbol.state | int == 9 %} Moderate rain showers
        {% elif states.sensor.smhi_weather_symbol.state | int == 10 %} Heavy rain showers
        {% elif states.sensor.smhi_weather_symbol.state | int == 11 %} Thunderstorm
        {% elif states.sensor.smhi_weather_symbol.state | int == 12 %} Light sleet showers
        {% elif states.sensor.smhi_weather_symbol.state | int == 13 %} Moderate sleet showers
        {% elif states.sensor.smhi_weather_symbol.state | int == 14 %} Heavy sleet showers
        {% elif states.sensor.smhi_weather_symbol.state | int == 15 %} Light snow showers
        {% elif states.sensor.smhi_weather_symbol.state | int == 16 %} Moderate snow showers
        {% elif states.sensor.smhi_weather_symbol.state | int == 17 %} Heavy snow showers
        {% elif states.sensor.smhi_weather_symbol.state | int == 18 %} Light rain
        {% elif states.sensor.smhi_weather_symbol.state | int == 19 %} Moderate rain
        {% elif states.sensor.smhi_weather_symbol.state | int == 20 %} Heavy rain
        {% elif states.sensor.smhi_weather_symbol.state | int == 21 %} Thunder
        {% elif states.sensor.smhi_weather_symbol.state | int == 22 %} Light sleet
        {% elif states.sensor.smhi_weather_symbol.state | int == 23 %} Moderate sleet
        {% elif states.sensor.smhi_weather_symbol.state | int == 24 %} Heavy sleet
        {% elif states.sensor.smhi_weather_symbol.state | int == 25 %} Light snowfall
        {% elif states.sensor.smhi_weather_symbol.state | int == 26 %} Moderate snowfall
        {% elif states.sensor.smhi_weather_symbol.state | int == 27 %} Heavy snowfall
        {%- endif -%}
